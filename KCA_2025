KAFKA CLUSTER ADMINISTRATOR KCA HANDBOOK

#3.6
oss_server.properties
###
process.roles=broker,controller
node.id=1 
controller.quorum.voters=1@xxx.xxx.xxx.xxx:yyy
listeners=PLAINTEXT://xxx.xxx.xxx.xxx:yyy,CONTROLLER://xxx.xxx.xxx.xxx:yyy
inter.broker.listener.name=PLAINTEXT 
advertised.listeners=PLAINTEXT:///xxx.xxx.xxx.xxx:yyy 
controller.listener.names=CONTROLLER log.dirs=/your_path
###

#3.7
oss_server.properties
process.roles=broker,controller 
node.id=1
controller.quorum.voters=1@xxx.xxx.xxx.xxx:yyy,2@xxx.xxx.xxx.xxx:yyy, 3@xxx.xxx.xxx.xxx:yyy
listeners=PLAINTEXT://xxx.xxx.xxx.xxx:yyy,CONTROLLER://xxx.xxx.xxx.xxx:yyy
inter.broker.listener.name=PLAINTEXT 
advertised.listeners=PLAINTEXT://xxx.xxx.xxx.xxx:yyy 
controller.listener.names=CONTROLLER
num.network.threads=3 num.io.threads=8
num.partitions=6 
num.recovery.threads.per.data.dir=1 
socket.send.buffer.bytes=102400 
socket.receive.buffer.bytes=102400 
socket.request.max.bytes=104857600
log.dirs=/your_path
offsets.topic.replication.factor=3 
transaction.state.log.replication.factor=3 
transaction.state.log.min.isr=3
log.retention.hours=168 log.segment.bytes=1073741824 
log.retention.check.interval.ms=300000
###

#10.1
oss_server_ssl.properties
### 
node.id=1 
broker.rack=RACK_01.PR
controller.quorum.voters=1@xxx.xxx.xxx:yyy, 2@xxx.xxx.xxx:yyy, 3@xxx.xxx.xxx:yyy
listeners=SSL://xxx.xxx.xxx:yyy,CONTROLLER://1xxx.xxx.xxx:yyy
inter.broker.listener.name=SSL advertised.listeners=SSL://xxx.xxx.xxx:yyy 
controller.listener.names=CONTROLLER
num.network.threads=N 
num.io.threads=N
num.partitions=N 
num.recovery.threads.per.data.dir=N
socket.send.buffer.bytes=N
socket.receive.buffer.bytes=N 
socket.request.max.bytes=n
log.dirs=/ayour_path 
log.retention.hours=N 
log.segment.bytes=N
log.retention.check.interval.ms=N
offsets.topic.replication.factor=N
transaction.state.log.replication.factor=N 
transaction.state.log.min.isr=N
ssl.keystore.location=/your_pem
ssl.keystore.password=your_pass
ssl.key.password=your_pass
ssl.truststore.location=/your_trust_store
ssl.truststore.password=your_pass
ssl.client.auth=required
quorum.auth.enable=true
quorum.auth.mechanism=SSL
quorum.listener.name=SSL quorum.ssl.keystore.location=/your_pem
quorum.ssl.key.password=your_pass
quorum.ssl.truststore.location=/your_pem
###

#10.4
oss_server_ssl_scram.properties 
###
process.roles=broker,controller
node.id=1 
broker.rack=your_rack
controller.quorum.voters=1@xxx.xxx.xxx:yyy, 2@1xxx.xxx.xxx:yyy, 3@xxx.xxx.xxx:yyy
listeners=SASL_SSL://xxx.xxx.xxx:yyy, CONTROLLER://xxx.xxx.xxx:yyy
inter.broker.listener.name=SASL_SSL advertised.listeners=SASL_SSL://xxx.xxx.xxx:yyy 
controller.listener.names=CONTROLLER
sasl.enabled.mechanisms=SCRAM-SHA-256 s
asl.mechanism.inter.broker.protocol=SCRAM-SHA-256
sasl.scram.login.callback.handler.class= rg.apache.kafka.common.security.scram.ScramLoginModule
ssl.keystore.location=/your_pem
ssl.keystore.password=your_pass
ssl.key.password=your_pass
ssl.truststore.location=/your_pem
ssl.truststore.password=/your_pass
ssl.client.auth=required
quorum.auth.enable=true 
quorum.auth.mechanism=SSL 
quorum.listener.name=SSL
quorum.ssl.keystore.location=/your_pem
quorum.ssl.key.password=your_pass
quorum.ssl.truststore.location=/your_pem
###

krb5.conf
###
[libdefaults]
    default_realm = EXAMPLE.COM
    dns_lookup_realm = false
    dns_lookup_kdc = false
    ticket_lifetime = 24h
    renew_lifetime = 7d
    forwardable = true
[realms]
    EXAMPLE.COM = {
    kdc = xxx.xxx.xxx
    kdc = xxx.xxx.xxx
    admin_server = xxx.xxx.xxx
    }
[domain_realm]
    .example.com = EXAMPLE.COM
    example.com = EXAMPLE.COM
###

kafka_consumer_lag_monitor.sh
###
#!/bin/bash
BOOTSTRAP_SERVER="xxx.xxx.xxx:yyy,xxx.xxx.xxx:yyy" 
GROUP_NAME="perf-consumer-NNNN" 
LOG_FILE="/your_monitor.log" 
TEMP_FILE="/your_temp_log"
LAG_THRESHOLD=500000
$KAFKA_HOME/bin/kafka-consumer-groups.sh --bootstrap-server $BOOTSTRAP_SERVER --describe --group $GROUP_NAME > $TEMP_FILE 2>> $LOG_FILE
# Check if the command executed successfully 
if [ $? -ne 0 ]; then
    echo "[$(date)] Error: Failed to fetch consumer group details. Check Kafka brokers or configuration." | tee -a $LOG_FILE
    exit 1 
fi

while IFS= read -r line; do
    if [[ "$line" =~ ^GROUP|^Consumer\ group ]]; then
        continue 
    fi
    TOPIC=$(echo $line | awk '{print $2}')
    PARTITION=$(echo $line | awk '{print $3}')
    LAG=$(echo $line | awk '{print $6}')
    if [[ "$LAG" =~ ^[0-9]+$ && "$LAG" -ge "$LAG_THRESHOLD" ]]; then
        echo "[$(date)] ALERT: High Consumer Lag detected! Group: $GROUP_NAME, Topic: $TOPIC, Partition: $PARTITION, Lag: $LAG" | tee -a $LOG_FILE
    fi
done < "$TEMP_FILE"
###

kafka-jmx-config.yml
###
---
rules:
  - pattern: "kafka.server<type=(.+), name=(.+)><>Value" name: "kafka_server_$1_$2"
    type: GAUGE
    help: "Kafka server metric $1 $2"
  - pattern: "java.lang<type=GarbageCollector, name=(.+)><>CollectionCount"
    name: "jvm_gc_collection_count_$1" type: COUNTER
    help: "JVM Garbage Collection Count $1"
  - pattern: "java.lang<type=Memory><>HeapMemoryUsage" name: "jvm_memory_heap_usage"
    type: GAUGE
    help: "JVM Heap Memory Usage"
###

oss_mirrormaker2.properties
###
clusters = primary, secondary
primary.bootstrap.servers = xxx.xxx.xxx:yyy,xxx.xxx.xxx:yyy,xxx.xxx.xxx:yyy
secondary.bootstrap.servers = 1xxx.xxx.xxx:yyy,xxx.xxx.xxx:yyy,xxx.xxx.xxx:yyy
primary->secondary.enabled = true
primary->secondary.topics = .*
primary->secondary.sync.topic.acls.enabled = true 
primary->secondary.sync.group.offsets.enabled = true 
primary->secondary.sync.topic.configs.enabled = true
primary->secondary.emit.heartbeats.enabled = true
replication.policy.class = org.apache.kafka.connect.mirror.DefaultReplicationPolicy
###

For commands, please refer to the book.

